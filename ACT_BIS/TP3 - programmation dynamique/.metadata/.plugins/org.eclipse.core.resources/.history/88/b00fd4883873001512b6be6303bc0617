package tp.main;

public class Main {
	
	static int maxNeg = 0, maxPos = 0, cmp = 0;
	static boolean initMin = false;
	static boolean initMax = false;
	static boolean initMaxPos = false;
	static boolean initMaxNeg = false;
	
	public static int [] parseCommandLine(String[] args) {
		int result [] = new int [4];
		String[] parts;
		for(String s : args) {
			parts = s.split("=");
			switch(parts[0]) {
			case "-m" :
				result[0] = Integer.parseInt(parts[1]);
				break;
			case "-n" :
				result[1] = Integer.parseInt(parts[1]);
				break;
			case "-i" :
				result[2] = Integer.parseInt(parts[1]);
				break;
			case "-j" :
				result[3] = Integer.parseInt(parts[1]);
				break;
			}
		}
		return result;
	}


	
static int f(int m, int n, int i, int j) {
		int val = 0, result = 0;
		final int previousMaxNeg = maxNeg, previousMaxPos = maxPos;
		boolean previousInitMaxPos = initMaxPos;
		boolean previousInitMaxNeg = initMaxNeg;
		initMaxPos = false;
		initMaxNeg = false;
		
		// Condition d'arret, il ne reste que la case piege
		if((m == 1) && (n == 1)){
			return 0;
		}
		
		/***********************   découpe verticale   **************************/
		
		// Découpe vers le bas
		for(int colonne=1; colonne<m; colonne++) {
			// Cas ou la case piege est à droite de la coupure
			if(i >= colonne) {
				val = f(m-colonne, n, i-colonne, j);
				cmp++;
			}
			// Cas ou la case piege est à gauche de la coupure
			else if(i < colonne){
				val = f(colonne, n, i, j);
				cmp++;
			}

			if( (val <= 0) && ( (maxNeg < val) || !initMaxNeg) ) {
				maxNeg = val;
				initMaxNeg = true;
			}
			else if( (maxPos < val) || !initMaxPos ) {
				maxPos = val;
				initMaxPos = true;
			}
		}
		
		/***********************   découpe horizontale   **************************/
		
		// Découpe vers la droite
		for(int ligne=1; ligne<n; ligne++) {
			// Cas ou la case piege est en dessous de la coupure
			if(j >= ligne) {
				val = f(m, n-ligne, i, j-ligne);
				cmp++;
			}
			// Cas ou la case piege est au dessus de la coupure
			else if(j < ligne) {
				val = f(m, ligne, i, j);
				cmp++;
			}
			
			if( (val <= 0) && ( (maxNeg < val) || !initMaxNeg) ) {
				maxNeg = val;
				initMaxNeg = true;
			}
			else if( (val > 0) && ( (maxPos < val) || !initMaxPos) ) {
				maxPos = val;
				initMaxPos = true;
			}
		}
		
		// Découpe vers la gauche
		if(initMaxNeg) {
			result = (Math.abs(maxNeg) + 1);
		}
		else if( initMaxPos ){
			result = (maxPos*(-1)) - 1;
			
		}
		
		initMaxNeg = previousInitMaxNeg;
		initMaxPos = previousInitMaxPos;
		maxPos = previousMaxPos;
		maxNeg = previousMaxNeg;
		
		//System.out.println("m: "+ m + "  n: " + n + "  maxNeg: " + maxNeg + "   maxPos: " +maxPos +"   result = " + result);
		
		return result;
		
	}
	
	public static void main(String[] args) {
		// format of the arguments for the execution : -m=? -n=? -i=? -j=?
		// arguments[0] = m, arguments[1] = n, arguments[2] = i, arguments[3] = j
		int arguments [] = parseCommandLine(args);
		int m = arguments[0];
		int n = arguments[1];
		int i = arguments[2];
		int j = arguments[3];
		System.out.println("m = " + arguments[0]);
		System.out.println("n = " + arguments[1]);
		System.out.println("i = " + arguments[2]);
		System.out.println("j = " + arguments[3]);
		
		long begin = System.nanoTime();
		int valeur = f(3, 3, 2, 2);
		long end = System.nanoTime();
		Game game = new Game(3, 3, 2, 2);
		System.out.println("Naive = " + valeur + "\ntime: " + ((end-begin)*Math.pow(10, -6)) + "ms");
	}
}